# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  test:
    docker:
      # specify the version you desire here
      - image: circleci/python:3.7.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make deps

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make unittest

      - store_artifacts:
          path: test-reports
          destination: test-reports
  build:
    docker:
      - image: circleci/python:3.7.4
    environment:
      IMAGE_NAME: tedk42/ic2datadog
    steps:
      - add_ssh_keys:
          fingerprints:
            - "f0:bf:66:be:d9:90:8d:6f:3b:78:03:1b:cb:35:1a:eb"
      - checkout
      - setup_remote_docker
      - run:
          name: SemVer the build
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make version
      - run:
          name: Build Docker image and tag with version
          command: |
            make build
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish:
    docker:
      - image: circleci/python:3.7.4
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - checkout
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USERNAME" --password-stdin
            make push
workflows:
  version: 2
  build-master:
    jobs:
      - test
      - build:
          requires:
            - test
          filters:
            branches:
              only: master
      - publish:
          requires:
            - build
          filters:
            branches:
              only: master
